package com.example.UserManagementSystem.service;

import java.util.HashMap;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import com.example.UserManagementSystem.dto.ReqRes;
import com.example.UserManagementSystem.entity.OurUsers;
import com.example.UserManagementSystem.repository.UsersRepo;

@Service
public class UserManagementService {
    @Autowired
    private UsersRepo usersRepo;

    @Autowired
    private JWTUtils jwtUtils;

    @Autowired
    private AuthenticationManager authenticationManager;

    @Autowired
    private PasswordEncoder passwordEncoder;

    // The register method takes a user registration request (ReqRes), processes
    // the information, saves the user details into the database, and returns a
    // response (ReqRes) with success or error information.

    public ReqRes register(ReqRes registrationRequest) {

        ReqRes resp = new ReqRes();
        /*
         * The behavior you're describing is enabled by Lombok, a Java library that
         * automatically
         * generates common methods like getters and setters at compile time using
         * annotations.
         * If the ReqRes class includes the annotation @Getter and/or @Setter, Lombok
         * will generate
         * the getter and setter methods (like getEmail() and setEmail()) during
         * compilation. This
         * means you won't see those methods explicitly written in the ReqRes class
         * source code, but
         * they exist in the compiled .class files.
         */

        try {
            // Check if a user with the provided email already exists in the database
            Optional<OurUsers> existingUser = usersRepo.findByEmail(registrationRequest.getEmail());

            if (existingUser.isPresent()) {
                // If the email already exists, return an appropriate error message
                resp.setStatusCode(400);
                resp.setMessage("User with this email already exists.");
                return resp;
            }

            /*
             * Creates a new OurUsers entity object.
             * Uses the ReqRes input (registrationRequest) to populate
             * its fields (email, city, role, name, and password).
             */
            OurUsers ourUser = new OurUsers();

            ourUser.setEmail(registrationRequest.getEmail());
            ourUser.setCity(registrationRequest.getCity());
            ourUser.setRole(registrationRequest.getRole());
            ourUser.setName(registrationRequest.getName());
            ourUser.setPassword(passwordEncoder.encode(registrationRequest.getPassword()));
            // A complete instance of the OurUsers entity, populated with
            // data as it exists after the save/insert/update operation.
            // It reflects the exact state of the entity in the database
            // after the operation.
            /*
             * After usersRepo.save(ourUser);:
             * Returned entity (ourUsersResult):
             * 
             * {
             * id: 1, // Auto-generated by the database
             * email: "johndoe@example.com",
             * name: "John Doe",
             * role: "USER",
             * password: "encrypted_password"
             * }
             */

            OurUsers ourUsersResult = usersRepo.save(ourUser);

            if (ourUsersResult.getId() > 0) {
                resp.setOurUsers(ourUsersResult);

                resp.setMessage("User Saved Successfully");

                resp.setStatusCode(200);
            }

        } catch (Exception e) {
            resp.setStatusCode(500);
            resp.setError(e.getMessage());
        }

        return resp;
    }

    // This login method in your UserManagementService class processes the login
    // logic and
    // returns a ReqRes object as a response.
    /*
     * Purpose of the Method:
     * 1)Authenticate a user using their email and password.
     * 2)Generate and return a JWT (JSON Web Token) and a refresh
     * token if the authentication is successful.
     * 3)Provide a user-friendly message along with the role of the
     * authenticated user.
     */

    public ReqRes login(ReqRes loginRequest) {

        ReqRes response = new ReqRes();

        try {
            /*
             * authenticationManager.authenticate() attempts to authenticate
             * the user's email and password:
             * 1)Creates a UsernamePasswordAuthenticationToken object with the
             * email and password.
             * 2)Delegates to the configured AuthenticationManager to validate the
             * credentials.
             */

            authenticationManager
                    .authenticate(
                            new UsernamePasswordAuthenticationToken(loginRequest.getEmail(),
                                    loginRequest.getPassword()));

            // A new instance of ReqRes is created to store the outcome of the login
            // operation, which will later be returned.

            /*
             * After successful authentication, it fetches the OurUsers entity associated
             * with the provided email.
             * findByEmail() returns an Optional object:
             * If the email exists, user contains the user entity.
             * If not, it throws an exception (causing the catch block to run).
             */

            var user = usersRepo.findByEmail(loginRequest.getEmail()).orElseThrow();
            /*
             * Calls jwtUtils.generateToken(user) to create a JWT for the authenticated
             * user.This token is usually short-lived and is used for secure stateless
             * communication with the API.
             * 
             * Calls jwtUtils.genrateRefreshToken() to create a refresh token.
             * The refresh token is usually long-lived and allows the user to get a new JWT
             * without logging in again.
             */

            var jwt = jwtUtils.generateToken(user);
            // A HashMap allows you to include custom claims in the JWT payload.
            // These claims are additional pieces of information about the user or
            // context (like roles, permissions, or any extra metadata) that you may
            // want to encode in the refresh token.represents an empty map, meaning no
            // additional claims are added to the refresh token. However, the design still
            // allows for future customization.
            var refreshToken = jwtUtils.genrateRefreshToken(new HashMap<>(), user);
            response.setStatusCode(200);
            response.setToken(jwt);
            response.setRole(user.getRole());
            response.setRefreshToken(refreshToken);
            response.setExpirationTime("24Hrs");
            response.setMessage("Successfully Logged In");
        } catch (Exception e) {

            response.setStatusCode(500);
            response.setMessage(e.getMessage());
        }

        return response;
    }
    /*
     * This method refreshToken() handles the refresh-token flow for renewing
     * an expired or soon-to-expire access token (JWT).
     * 
     * Purpose of the Method:
     * The method takes a refresh token (provided in the refreshTokenRequest) and:
     * Validates the refresh token.
     * Extracts the associated user's email.
     * Generates a new access token (JWT) if the token is valid.
     * Responds with a fresh JWT, keeping the provided refresh token intact.
     */

    public ReqRes refreshToken(ReqRes refreshTokenRequest) {
        ReqRes response = new ReqRes();
        try {
            String ourEmail = jwtUtils.extractUsername(refreshTokenRequest.getToken());
            OurUsers users = usersRepo.findByEmail(ourEmail).orElseThrow();
            if (jwtUtils.isTokenValid(refreshTokenRequest.getToken(), users)) {
                var jwt = jwtUtils.generateToken(users);
                response.setStatusCode(200);
                response.setToken(jwt);
                response.setRefreshToken(refreshTokenRequest.getToken());
                response.setExpirationTime("24Hr");
                response.setMessage("Successfully Refreshed Token");
            }
            response.setStatusCode(200);
            return response;

        } catch (Exception e) {
            response.setStatusCode(500);
            response.setMessage(e.getMessage());
            return response;
        }
    }

    /*
     * This method fetches all user records from the database and wraps the result
     * in a custom response object (ReqRes).It handles the case where the database
     * may be empty or where exceptions occur during processing.
     */

    public ReqRes getAllUsers() {

        // A new instance of ReqRes is created to encapsulate the method's response.
        ReqRes reqRes = new ReqRes();

        try {
            /*
             * usersRepo.findAll(): Retrieves all entries in the OurUsers table
             * (associated with usersRepo).Returns a list of OurUsers entities, which
             * could be empty if no users are in the database.
             */
            List<OurUsers> result = usersRepo.findAll();

            // If users exist
            if (!result.isEmpty()) {
                // Sets the user list in reqRes
                reqRes.setOurUsersList(result);
                reqRes.setStatusCode(200);
                reqRes.setMessage("Successful");
            } else {
                reqRes.setStatusCode(404);
                reqRes.setMessage("No users found");
            }
            return reqRes;
        } catch (Exception e) {
            reqRes.setStatusCode(500);
            reqRes.setMessage("Error occurred: " + e.getMessage());
            return reqRes;
        }
    }

    // The method retrieves a user from the database based on their unique ID.
    /*
     * Queries the database for a user with the given id.
     * Returns an Optional<OurUsers>.
     * orElseThrow:
     * If no user is found, throws a RuntimeException with the message
     * "User Not found".
     * This stops further execution in the try block and goes to the catch block.
     * 
     */
    public ReqRes getUsersById(Integer id) {
        ReqRes reqRes = new ReqRes();
        try {
            OurUsers usersById = usersRepo.findById(id).orElseThrow(() -> new RuntimeException("User Not found"));
            reqRes.setOurUsers(usersById);
            reqRes.setStatusCode(200);
            reqRes.setMessage("Users with id '" + id + "' found successfully");
        } catch (Exception e) {
            reqRes.setStatusCode(500);
            reqRes.setMessage("Error occurred: " + e.getMessage());
        }
        return reqRes;
    }

    // This method allows you to delete a user from the database based on their
    // unique ID.

    public ReqRes deleteUser(Integer userId) {
        ReqRes reqRes = new ReqRes();
        try {
            /*
             * Optional is a class from the java.util package. It wraps a value that may
             * either:
             * ->Be present (non-null value).
             * ->Be empty (no value, effectively replacing null).
             */
            Optional<OurUsers> userOptional = usersRepo.findById(userId);
            /*
             * Searches the database for a user with the given userId.
             * Returns:
             * Optional<OurUsers> if the user exists.
             * Empty Optional if the user is not found.
             */

            if (userOptional.isPresent()) {
                usersRepo.deleteById(userId);
                reqRes.setStatusCode(200);
                reqRes.setMessage("User deleted successfully");
            } else {
                reqRes.setStatusCode(404);
                reqRes.setMessage("User not found for deletion");
            }
        } catch (Exception e) {
            reqRes.setStatusCode(500);
            reqRes.setMessage("Error occurred while deleting user: " + e.getMessage());
        }
        return reqRes;
    }

    public ReqRes updateUser(Integer userId, OurUsers updatedUser) {
        ReqRes reqRes = new ReqRes();
        try {

            // Searches the database for the user with the provided userId.
            // If the user exists, the result is wrapped in an Optional

            Optional<OurUsers> userOptional = usersRepo.findById(userId);

            if (userOptional.isPresent()) {

                OurUsers existingUser = userOptional.get();
                // Copies the new data from the updatedUser object
                // to the existingUser object.
                existingUser.setEmail(updatedUser.getEmail());
                existingUser.setName(updatedUser.getName());
                existingUser.setCity(updatedUser.getCity());
                existingUser.setRole(updatedUser.getRole());

                // Check if password is present in the request
                if (updatedUser.getPassword() != null && !updatedUser.getPassword().isEmpty()) {
                    // Encode the password and update it
                    existingUser.setPassword(passwordEncoder.encode(updatedUser.getPassword()));
                }
                // after updating every field of existing user with the value of updated user
                // now it is the time to save these updates in the data base

                OurUsers savedUser = usersRepo.save(existingUser);
                reqRes.setOurUsers(savedUser);
                reqRes.setStatusCode(200);
                reqRes.setMessage("User updated successfully");
            } else {
                reqRes.setStatusCode(404);
                reqRes.setMessage("User not found for update");
            }
        } catch (Exception e) {
            reqRes.setStatusCode(500);
            reqRes.setMessage("Error occurred while updating user: " + e.getMessage());
        }
        return reqRes;
    }

    // The getMyInfo method retrieves information about a user based on their email
    // address.
    // Returns: A ReqRes object containing the user's information, status code, and
    // a message.

    public ReqRes getMyInfo(String email) {
        ReqRes reqRes = new ReqRes();
        try {
            /*
             * usersRepo.findByEmail(email): Queries the database to find a user with the
             * provided email address.Optional: Wraps the result to handle cases where no
             * user is found (avoiding NullPointerException).
             */
            Optional<OurUsers> userOptional = usersRepo.findByEmail(email);
            // isPresent(): Verifies if a user is found
            if (userOptional.isPresent()) {
                reqRes.setOurUsers(userOptional.get());
                reqRes.setStatusCode(200);
                reqRes.setMessage("successful");
            } else {
                reqRes.setStatusCode(404);
                reqRes.setMessage("User not found for update");
            }

        } catch (Exception e) {
            reqRes.setStatusCode(500);
            reqRes.setMessage("Error occurred while getting user info: " + e.getMessage());
        }
        return reqRes;

    }

}
